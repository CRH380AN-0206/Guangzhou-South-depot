#include "pch.h"
#include <iostream>
#include <stdlib.h>
#include <string>
#include <iomanip>
#include <fstream>
using namespace std;
/*CRH380AN-0206*/
struct train
{
	int serial;
	char number[10];
	char dpt[30];
	char tml[30];
	char type[10];
	int price;
	int ticket;
	char dpt_time[10];
}hsr[30];
struct psg
{
	unsigned int username;
	unsigned int password;
	char number[10];
	char dpt[30];
	char tml[30];
	char type[10];
	int tk_amt;
	int prc;
	char time[10];
}user[10];
struct admin
{
	unsigned int admin_name;
	unsigned int pswd;
}ad[50];
typedef train rail;
typedef psg people;
struct List
{
	rail *list;
	int size;
	int maxsize;
}L;
struct List2
{
	people *list;
	int size;
	int maxsize;
}l;
struct List3
{
	admin *list;
	int size;
	int maxsize;
}a;
ostream& operator <<(ostream& ostr, const rail& x)
{
	ostr.setf(ios::left);
	ostr << setw(10) << x.serial << setw(10) << x.number;
	ostr << setw(10) << x.dpt << setw(10) << x.tml << setw(10) << x.type << setw(10) << x.price << setw(10) << x.ticket<<setw(10)<<x.dpt_time;
	return ostr;
}
ostream& operator <<(ostream& ostr, const people& y)
{
	ostr.setf(ios::left);
	ostr << setw(6) << y.username << setw(12) << y.password;
	ostr << setw(10) << y.dpt << setw(10) << y.tml << setw(10) << y.type<<setw(10)<<y.time;
	return ostr;
}
bool operator==(const rail& e1,const rail& e2)
{
	return(strcmp(e1.number, e2.number) == 0);
	//return(e1.serial == e2.serial);
}
bool operator==(const people& e3, const people& e4)
{
	return(e3.password == e4.password);
	return(e3.username == e4.username);
}
bool operator==(const admin& e3, const admin& e4)
{
	return(e3.pswd == e4.pswd);
}
bool operator<(const rail& e1, const rail& e2)
{
	return(strcmp(e1.dpt, e2.dpt) == -1);
}
bool operator<(const people& e3, const people& e4)
{
	return(strcmp(e3.dpt, e4.dpt) == -1);
}
bool operator<(const admin& e3, const admin& e4)
{
	return(e3.admin_name<e4.admin_name);
}
bool operator>(const rail& e1, const rail& e2)
{
	return(strcmp(e1.dpt, e2.dpt) == 1);
}
bool operator>(const people& e3, const people& e4)
{
	return(strcmp(e3.dpt, e4.dpt) == 1);
}
void initlist(List &L)
{
	L.maxsize = 10;
	L.list = new rail[L.maxsize];
	if (L.list == NULL)
	{
		cout << "动态可分配空间耗尽" << endl;
		exit(1);
	}
	L.size = 0;
}//初始化线性表
void initlist2(List2 &l)
{
	l.maxsize = 10;
	l.list = new people[l.maxsize];
	if (l.list == NULL)
	{
		cout << "动态可分配空间耗尽" << endl;
		exit(1);
	}
	l.size = 0;
}//初始化线性表2
void initlist3(List3 &l)
{
	l.maxsize = 10;
	l.list = new admin[l.maxsize];
	if (l.list == NULL)
	{
		cout << "动态可分配空间耗尽" << endl;
		exit(1);
	}
	l.size = 0;
}//初始化线性表2
void clearlist(List &L)
{
	if (L.list != NULL)
	{
		delete[]L.list;
		L.list = NULL;
	}
	L.maxsize = 0;
	L.size = 0;
}//清空线性表
void clearlist2(List2 &l)
{
	if (l.list != NULL)
	{
		delete[]l.list;
		l.list = NULL;
	}
	l.maxsize = 0;
	l.size = 0;
}//清空线性表2
int lenlist(List &L)
{
	return L.size;
}//获得线性表的长度
int lenlist2(List2 &l)
{
	return l.size;
}//获得线性表的长度
bool empty(List &L)
{
	return L.size == 0;
}//检查是否为空
bool empty2(List2 &l)
{
	return l.size == 0;
}//检查是否为空
rail get(List &L, int pos)
{
	if (pos<1 || pos>L.size)
	{
		cerr << "超限" << endl;
		exit(1);
	}
	/*CRH380AN-0206*/
	return L.list[pos - 1];
}//得到指定序数POS的元素
people get2(List2 &l, int pos)
{
	if (pos<1 || pos>l.size)
	{
		cerr << "超限" << endl;
		exit(1);
	}
	return l.list[pos - 1];
}//得到指定序数POS的元素
void traver(List &L)
{
	cout <<"序号"<< setw(10) << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) << "票价" << setw(10) << "余票" << setw(10) <<"发时"<<endl;
	for (int i = 0; i < L.size; i++)
	{
		cout << L.list[i] << setw(10);
		cout << endl;
	}
	cout << endl;
}//遍历线性表
bool find(List &L, rail& item)
{
	for (int i = 0; i < L.size; i++)
		if (L.list[i] == item)
		{
			item = L.list[i];
			return true;
		}
		return false;
}//找出具有给定值的第一个元素
bool find2(List2 &l, people& item)
{
	for (int i = 0; i < l.size; i++)
		if (l.list[i] == item)
		{
			item = l.list[i];
			return true;
		}
	return false;
}//找出具有给定值的第一个元素
bool find3(List3 &l, admin& item)
{
	for (int i = 0; i < l.size; i++)
		if (l.list[i] == item)
		{
			item = l.list[i];
			return true;
		}
	return false;
}//找出具有给定值的第一个元素
bool update(List &L, rail& item)
{
	for (int i = 0; i < L.size; i++)
	{
		if (L.list[i] == item)
		{
			L.list[i] = item;
			return true;
		}
	}
	return false;
}
bool update2(List2 &l, people& item)
{
	for (int i = 0; i < l.size; i++)
	{
		if (l.list[i] == item)
		{
			l.list[i] = item;
			return true;
		}
	}
	return false;
}
bool insert(List &L, rail item, int pos)
{
	if (pos<-1 || pos>L.size+1 )
	{
		cout << "pos值无效" << endl;
		return false;
	}
	int i;
	if (pos == 0)
	{
		for (i = 0; i < L.size; i++)
		{
			if (item < L.list[i])
			{
				break;
			}
			pos = i + 1;
		}
	}
	else if (pos == -1)
	{
		pos = L.size + 1;
	}
	if (L.size == L.maxsize)
	{
		int k = sizeof(rail);
		L.list = (rail*)realloc(L.list, 2 * L.maxsize*k);
		if (L.list == NULL)
		{
			cout << "无空间，退出" << endl;
			exit(1);
		}
		L.maxsize = 2 * L.maxsize;
	}
	for (i = L.size - 1; i >= pos - 1; i--)
	{
		L.list[i + 1] = L.list[i];
	}
	L.list[pos - 1] = item;
	L.size++;
	return true;
}//插入元素
bool insert2(List2 &l, people item, int pos)
{
	if (pos<-1 || pos>l.size + 1)
	{
		cout << "pos值无效" << endl;
		return false;
	}
	int i;
	if (pos == 0)
	{
		for (i = 0; i < l.size; i++)
		{
			if (item < l.list[i])
			{
				break;
			}
			pos = i + 1;
		}
	}
	else if (pos == -1)
	{
		pos = l.size + 1;
	}
	if (l.size == l.maxsize)
	{
		int k = sizeof(people);
		l.list = (people*)realloc(l.list, 2 * l.maxsize*k);
		if (l.list == NULL)
		{
			cout << "无空间，退出" << endl;
			exit(1);
		}
		l.maxsize = 2 * l.maxsize;
	}
	for (i = l.size - 1; i >= pos - 1; i--)
	{
		l.list[i + 1] = l.list[i];
	}
	l.list[pos - 1] = item;
	l.size++;
	return true;
}//插入元素
bool insert3(List3 &l, admin item, int pos)
{
	if (pos<-1 || pos>l.size + 1)
	{
		cout << "pos值无效" << endl;
		return false;
	}
	int i;
	if (pos == 0)
	{
		for (i = 0; i < l.size; i++)
		{
			if (item < l.list[i])
			{
				break;
			}
			pos = i + 1;
		}
	}
	else if (pos == -1)
	{
		pos = l.size + 1;
	}
	if (l.size == l.maxsize)
	{
		int k = sizeof(admin);
		l.list = (admin*)realloc(l.list, 2 * l.maxsize*k);
		if (l.list == NULL)
		{
			cout << "无空间，退出" << endl;
			exit(1);
		}
		l.maxsize = 2 * l.maxsize;
	}
	for (i = l.size - 1; i >= pos - 1; i--)
	{
		l.list[i + 1] = l.list[i];
	}
	l.list[pos - 1] = item;
	l.size++;
	return true;
}//插入元素
bool del(List &L, rail& item, int pos)
{
	if (L.size == 0)
	{
		cout << "空表，无效" << endl;
		return false;
	}
	if (pos<-1 || pos>L.size + 1)
	{
		cout << "pos值无效" << endl;
		return false;
	}
	int i;
	if (pos == 0)
	{
		for (i = 0; i < L.size; i++)
		{
			if (item == L.list[i])
			{
				break;
			}
			if (i == L.size)
			{
				return false;
			}
		}
	}
	else if (pos == -1)
	{
		pos = L.size;
	}
	item = L.list[pos - 1];
	for (i = pos; i < L.size; i++)
	{
		L.list[i - 1] = L.list[i];
	}
	L.size--;
	if (float(L.size) / L.maxsize < 0.4&&L.maxsize>10)
	{
		int k = sizeof(rail);
		L.list = (rail*)realloc(L.list, L.maxsize*k / 2);
		L.maxsize = L.maxsize / 2;
	}
	return true;
}
bool del2(List2 &l, people& item, int pos)
{
	if (l.size == 0)
	{
		cout << "空表，无效" << endl;
		return false;
	}
	if (pos<-1 || pos>l.size + 1)
	{
		cout << "pos值无效" << endl;
		return false;
	}
	int i;
	if (pos == 0)
	{
		for (i = 0; i < l.size; i++)
		{
			if (item == l.list[i])
			{
				break;
			}
			if (i == l.size)
			{
				return false;
			}
		}
	}
	else if (pos == -1)
	{
		pos = L.size;
	}
	item = l.list[pos - 1];
	for (i = pos; i < l.size; i++)
	{
		l.list[i - 1] = l.list[i];
	}
	l.size--;
	if (float(l.size) / l.maxsize < 0.4&&l.maxsize>10)
	{
		int k = sizeof(people);
		l.list = (people*)realloc(l.list, l.maxsize*k / 2);
		l.maxsize = l.maxsize / 2;
	}
	return true;
}
void sort(List &L)
{
	int i, j;
	rail x;
	for (i = 1; i < L.size; i++)
	{
		x = L.list[i];
		for (j = i - 1; j >= 0; j--)
		{
			if (x < L.list[j])
			{
				L.list[j + 1] = L.list[j];
			}
			else break;
		}
		L.list[j + 1] = x;
	}
	/*CRH380AN-0206*/
}
void passenger();
void adminitrator();
void choose_1();
void read_train(List &L, const char* fname);
void read_user(List2 &l,const char* fname);
void read_admin(List3 &l,const char* fname);
void writefile(char* fname, List& L);
void writefile2(char* fname, List2& l);
void login();
void Register();
void choose_2();
void buy();
void search();
void give_up();
void enter();
void choose_3();
void add();
void del_train();
void fix();
int main()
{
	
	cout << "***CRH380AN-0206***" << endl;
	int i;
	int choice_1;
	List L0;
	initlist(L0);
	read_train(L0,"E:/train.txt");
	cout << "请严格按提示操作" << endl;
	cout << "*******************************" << endl;
	cout << "买票请到12306，发货请到95306" << endl;
	cout << "*******************************" << endl;
	cout << "以抢钱为宗旨，待旅客如孙子" << endl;
	cout << "*******************************" << endl;
	choose_1();
}
void passenger()
{
	int temp_1;
	cout << "欢迎使用购票系统" << endl;
	cout << "首次使用请注册，如有账号请直接登录" << endl;
flag:
	cout << "1:登录" << endl;
	cout << "2:注册" << endl;
	cin >> temp_1;
	if (temp_1 != 1 && temp_1 != 2)
	{
		cout << "选择有误，重新输入" << endl;
		goto flag;
	}
	switch (temp_1)
	{
	case 1:login(); break;
	case 2:Register(); break;
	}
	choose_2();
}
void adminitrator()
{
	List3 L2;
	initlist3(L2);
	read_admin(L2, "E:/admin.txt");
	enter();
	choose_3();
}
void choose_1()
{
	int choice_1;
	cout << "请选择登陆入口" << endl;
flag:
	cout << "1:乘客入口" << endl;
	cout << "2:管理员入口" << endl;
	cin >> choice_1;
	if (choice_1 != 1 && choice_1 != 2)
	{
		cout << "选择错误，重新输入" << endl;
		goto flag;
	}
	switch (choice_1)
	{
	case 1:passenger(); break;
	case 2:adminitrator(); break;
	}
}
void read_train(List &L, const char* fname)
{
	ifstream ifstr(fname, ios::in | ios::_Nocreate);
	if (!ifstr)
	{
		cerr << "找不到文件" << endl;
		exit(1);
	}
	int i = 1;
	rail g;
	while (ifstr >> g.serial)
	{
		ifstr >> g.number >> g.dpt >> g.tml >> g.type >> g.price >> g.ticket>>g.dpt_time;
		insert(L, g, i++);
	}
	ifstr.close();
}
void read_user(List2 & l, const char * fname)
{
	ifstream ifstr(fname, ios::in | ios::_Nocreate);
	if (!ifstr)
	{
		cerr << "找不到文件" << endl;
		exit(1);
	}
	int i = 1;
	people p;
	while (ifstr >> p.username)
	{
		ifstr >> p.password >>p.number>> p.dpt >> p.tml >> p.type >> p.tk_amt >> p.prc>>p.time;
		insert2(l, p, i++);
	}
	ifstr.close();
}
void read_admin(List3 &l,const char* fname)
{
	ifstream ifstr(fname, ios::in | ios::_Nocreate);
	if (!ifstr)
	{
		cerr << "找不到文件" << endl;
		exit(1);
	}
	int i = 1;
	admin a;
	while (ifstr >> a.admin_name)
	{
		ifstr  >> a.pswd ;
		insert3(l, a, i++);
	}
	ifstr.close();
}
void writefile(const char* fname, List& L)
{
	ofstream ofstr(fname);
	if (!ofstr)
	{
		cerr << "找不到对象" << endl;
		exit(1);
	}
	int n = lenlist(L);
	rail g;
	/*CRH380AN-0206*/
	for (int i = 1; i <= n; i++)
	{
		g = get(L, i);
		ofstr << g.serial << setw(10) << g.number << setw(10) << g.dpt << setw(10) << g.tml << setw(10) << g.type << setw(10) << g.price << setw(10) << g.ticket <<setw(10)<<g.dpt_time<< endl;
	}
	ofstr.close();
}
void writefile2(const char * fname, List2 & l)
{
	ofstream ofstr(fname);
	if (!ofstr)
	{
		cerr << "找不到对象" << endl;
		exit(1);
	}
	int n = lenlist2(l);
	people p;
	for (int i = 1; i <= n; i++)
	{
		p = get2(l, i);
		ofstr << p.username << setw(10) << p.password << setw(10) <<p.number<<setw(10)<< p.dpt << setw(10) << p.tml << setw(10) << p.type << setw(10) << p.tk_amt << setw(10) << p.prc <<setw(10)<<p.time<< endl;
	}
	ofstr.close();
}
void choose_2()
{
	int choose=0;
	List L0;
	initlist(L0);
	read_train(L0, "E:/train.txt");
	cout << "请选择功能" << endl;
	cout << "1:查看所有发售车次" << endl;
	cout << "2:搜索" << endl;
	cout << "3:购票" << endl;
	cout << "4.退票" << endl;
	cout << "5.返回" << endl;
	cin >> choose;
	switch (choose)
	{
	case 1:traver(L0);choose_2(); break;
	case 2:search(); break;
	case 3:buy(); break;
	case 4:give_up(); break;
	case 5:choose_1(); break;
	}
}
void login()
{
	List2 L1;
	initlist2(L1);
	read_user(L1, "E:/user.txt");
	people p;
flag:
	cout << "请输入账号" << endl;
	cin >> p.username;
	cout << "请输入密码" << endl;
	cin >> p.password;
	if (!find2(L1, p))
	{
		cout << "账号或密码有误" << endl;
		goto flag;
	}
}
void Register()
{
	List2 L1;
	initlist2(L1);
	read_user(L1, "E:/user.txt");
	people p;
	int psw_1=0, psw_2=0;
	int use;
	const char* a="null";
flag0:
	cout << "请输入用户名（仅限六位数字）" << endl;
	cin >> p.username;
	if (find2(L1, p))
	{
		cout << "该用户名已被使用" << endl;
		goto flag0;
	}
flag1:
	cout << "请输入密码（仅限六位数字）" << endl;
	cin >> psw_1;
	cout << "请再次输入密码（仅限六位数字）" << endl;
	cin >> psw_2;
	if (psw_1 != psw_2)
	{
		cout << "两次密码不同，请重新输入" << endl;
		goto flag1;
	}
	p.password = psw_1;
	strcpy_s(p.number, a);
	strcpy_s(p.dpt, a);
	strcpy_s(p.tml, a);
	strcpy_s(p.type, a);
	strcpy_s(p.time, a);
	p.tk_amt = 0;
	p.prc = 0;
	insert2(L1, p, lenlist2(L1) + 1);
	writefile2("E:/user.txt", L1);
	login();
}
void search()
{
	int n = 0;
	List L0;
	initlist(L0);
	read_train(L0, "E:/train.txt");
	ifstream in("E:/train.txt", ios::in);
	if (!in.is_open())
	{
		cout << "找不到对象" << endl;
		exit(1);
	}
	while (!in.eof() && n < 30)
	{
		in >> hsr[n].serial >> hsr[n].number >> hsr[n].dpt >> hsr[n].tml >> hsr[n].type >> hsr[n].ticket >> hsr[n].price>>hsr[n].dpt_time;
		n++;
	}
	int temp_1 = 0;
	int i, k = 0, j = 0,m=0,x=0;
	char num[10];
	char go[10];
	char stop[10];
	cout << "请选择搜索对象" << endl;
	cout << "1:车次号" << endl;
	cout << "2:始发站" << endl;
	cout << "3:终到站" << endl;
	cin >> temp_1;
	switch (temp_1)
	{
	case 1:
	{
flag1:
		cout << "请输入车次号" << endl;
		cin >> num;

		for (i = 0; i < 30; i++)
		{
			k = strcmp(num, hsr[i].number);
			if (k == 0)
			{
				cout << hsr[i].number << setw(10) << hsr[i].dpt << setw(10) << hsr[i].tml << setw(10) << hsr[i].type << setw(10) << hsr[i].price << setw(10) << hsr[i].ticket<<setw(10)<<hsr[i].dpt_time<<endl;
				break;
			}
			else
			{
				j++;
				if (j == L0.size)
				{
					cout << "找不到该列车，请重新输入" << endl;
					goto flag1;
				}
			}
		}
	}; break;
	case 2:
	{
flag2:
		cout << "请输入车站名" << endl;
		cin >> go;
		cout << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) << "票价" << setw(10) << "余票" <<setw(10)<<"发时"<< endl;
		for (i = 0; i < 30; i++)
		{
			k = strcmp(go, hsr[i].dpt);
			if (k == 0)
			{
				cout << hsr[i].number << setw(10) << hsr[i].dpt << setw(10) << hsr[i].tml << setw(10) << hsr[i].type << setw(10) << hsr[i].price << setw(10) << hsr[i].ticket << setw(10) << hsr[i].dpt_time<< endl;
			}
			else
			{
				m++;
				if (m == L0.size)
				{
					cout << "找不到该车站，请重新输入" << endl;
					goto flag2;
				}
			}
		}
	}; break;
	case 3:
	{
flag3:
		cout << "请输入车站名" << endl;
		cin >> stop;
		cout << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) << "票价" << setw(10) << "余票" << setw(10) << "发时" << endl;
		for (i = 0; i < 30; i++)
		{
			k = strcmp(stop, hsr[i].tml);
			if (k == 0)
			{
				cout << hsr[i].number << setw(10) << hsr[i].dpt << setw(10) << hsr[i].tml << setw(10) << hsr[i].type << setw(10) << hsr[i].price << setw(10) << hsr[i].ticket << setw(10) << hsr[i].dpt_time<< endl;
			}
			else
			{
				x++;
				if (x == L0.size)
				{
					cout << "找不到该车站，请重新输入" << endl;
					goto flag3;
				}
			}
		}
	}; break;
	}
	choose_2();
}
void give_up()
{
	List L0;
	List2 L1;
	initlist(L0);
	initlist2(L1);
	read_user(L1, "E:/user.txt");
	read_train(L0, "E:/train.txt");
	rail r;
	people p;
	int out;
	cout << "请输入账号和密码以验证身份" << endl;
flag1:
	cin >> p.username>>p.password;
	if (find2(L1, p))
	{
		cout << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) <<"发时"<<setw(10)<< "数量" << endl;
		cout << p.number << setw(10) << p.dpt << setw(10) << p.tml << setw(10) << p.type << setw(10) <<p.time<<setw(10)<< p.tk_amt << endl;
	Flag0:
		cout << "请输入退票车次" << endl;
		cin >> r.number;
		cout << "请输入退票数量" << endl;
		cin >> out;
		if (out > p.tk_amt)
		{
			cout << "超出数量，请重新输入" << endl;
			goto Flag0;
		}
		p.tk_amt = p.tk_amt - out;
		if (update2(L1, p))
		{
			cout << "退票成功" << endl;
			cout << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) << "数量" << endl;
			cout << p.number << setw(10) << p.dpt << setw(10) << p.tml << setw(10) << p.type << setw(10) << p.tk_amt << endl;
		}
		if (find(L0, r))
		{
			r.ticket = r.ticket + out;
			if (update(L0, r))
			{
				traver(L0);
				cout << "请稍候。。。" << endl;
			}
			
		}
		writefile2("E:/user.txt", L1);
		writefile("E:/train.txt", L0);
	}
	else
	{
		cout << "验证失败,请重新输入" << endl;
		goto flag1;
	}
	choose_2();
}
void enter()
{
	List3 L2;
	initlist3(L2);
	read_admin(L2, "E:/admin.txt");
	admin a;
flag:
	cout << "请输入账号" << endl;
	cin >> a.admin_name;
	cout << "请输入密码" << endl;
	cin >> a.pswd;
	if (!find3(L2, a))
	{
		cout << "账号或密码有误" << endl;
		goto flag;
	}
}
void choose_3()
{
	int choice;
	cout << "请选择功能" << endl;
	cout << "1:增加车次" << endl;
	cout << "2:删减车次" << endl;
	cout << "3:修改车次" << endl;
	cout << "4:返回" << endl;
	cin >> choice;
	switch (choice)
	{
	case 1:add(); break;
	case 2:del_train(); break;
	case 3:fix(); break;
	case 4:choose_1(); break;
	}
}
void buy()
{
	List L0;
	List2 L1;
	initlist(L0);
	initlist2(L1);
	read_user(L1, "E:/user.txt");
	read_train(L0, "E:/train.txt");
	rail r;
	people p;
	int i = 0, j = 0, k = 0, n = 0, choose = 0;
	traver(L0);
	cout << "请输入您准备购买的列车的车次号" << endl;
	cout << "请谨慎输入，否则程序崩溃" << endl;
	cin >> r.number;
	if (find(L0, r))
	{
flag:
		cout << "请输入您需要的数量" << endl;
		cin >> j;
		if (j > r.ticket)
		{
			cout << "超出数量限制，请重新输入" << endl;
			goto flag;
		}
		r.ticket -= j;
		if (update(L0, r))
			cout << "购票成功" << endl;
	}
	writefile("E:/train.txt", L0);
	strcpy_s(p.number, r.number);
	strcpy_s(p.dpt, r.dpt);
	strcpy_s(p.tml, r.tml);
	strcpy_s(p.type, r.type);
	strcpy_s(p.time, r.dpt_time);
	p.tk_amt = j;
	p.prc = r.price;
	cout << "请再次输入账号和密码验证身份" << endl;//为运算符重载提供依据
flag1:
	cin >> p.username>>p.password;
	if (update2(L1, p))
	{
		cout << "您已成功购买以下车次列车车票" << j << "张，请按时乘车" << endl;
		cout << "车次" << setw(10) << "始发" << setw(10) << "终到" << setw(10) << "本务" << setw(10) << "数量" <<setw(10)<<"发时"<< endl;
		cout << p.number << setw(10) << p.dpt << setw(10) << p.tml << setw(10) << p.type << setw(10) << p.tk_amt <<setw(10)<<p.time<< endl;
	}
	else
	{
		cout << "验证失败,请重新输入" << endl;
		goto flag1;
	}
	writefile2("E:/user.txt", L1);
	choose_2();
}
void add()
{
	List L0;
	initlist(L0);
	read_train(L0, "E:/train.txt");
	rail r;
	cout << "请输入新车次,按序号、车次、始发、终到、本务、价格、票数、时间(HH:MM)，以空格分隔" << endl;
	cin >> r.serial >> r.number >> r.dpt >> r.tml >> r.type >> r.price >> r.ticket>>r.dpt_time;
	insert(L0, r, lenlist(L0) + 1);
	cout << "the new record is added to the end of the list" << endl;
	writefile("E:/train.txt", L0);
	choose_3();
}
void del_train()
{
	List L0;
	initlist(L0);
	read_train(L0, "E:/train.txt");
	rail r;
	traver(L0);
	cout << "请输入要删除的序号"<<endl;
	cin >> r.serial;
	if (del(L0, r, r.serial))
	{
		cout << "the serial: " << r.serial << " is deleted" << endl;
	}
	else
	{
		cout << "the record doesn‘t exist" << endl;
	}
	writefile("E:/train.txt", L0);
	choose_3();
}
void fix()
{
	List L0;
	initlist(L0);
	read_train(L0, "E:/train.txt");
	rail r;
	int i=0,x=0,k=0;
	char text[] = "NULL";
	char*a = text;
	traver(L0);
	cout << "输入要修改车次" << endl;
	cin >> r.number;
	cout << "请选择要修改的项目" << endl;
	cout << "1.始发" << endl;
	cout << "2.终到" << endl;
	cout << "3.本务" << endl;
	cout << "4.价格" << endl;
	cout << "5.票数" << endl;
	cout << "6.发时" << endl;
	cin >> i;
	if (find(L0, r))
	{
		switch (i)
		{
		case 1:
			cout << "输入新的始发站" << endl;
			cin >> r.dpt;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		case 2:
			cout << "输入新的终到站" << endl;
			cin >> r.tml;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		case 3:
			cout << "输入新的本务" << endl;
			cin >> r.type;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		case 4:
			cout << "输入新的价格" << endl;
			cin >> r.price;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		case 5:
			cout << "输入新的票数" << endl;
			cin >> r.ticket;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		case 6:
			cout << "输入新的发时" << endl;
			cin >> r.dpt_time;
			if (update(L0, r)) cout << "成功修改" << endl;
			break;
		}
	}
	traver(L0);
	writefile("E:/train.txt", L0);
	choose_3();
}